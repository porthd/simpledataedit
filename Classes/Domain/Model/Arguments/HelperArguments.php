<?php

namespace Porthd\Simpledataedit\Domain\Model\Arguments;

/***************************************************************
 *
 *  Copyright notice
 *
 *  (c) 2021 Dr. Dieter Porth <info@mobger.de>
 *
 *  All rights reserved
 *
 *  This script iSimpledataedits free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

use Porthd\Simpledataedit\Exception\SimpledataeditException;

trait HelperArguments // implements DataArgumentsInterface;
{


    /**
     * @var array
     */
    protected $listOfJsonValues = [];

    /**
     * @var string
     */
    protected $attributesHash = '';


    /**
     * These arguuments are not part of the editor-attributes.
     * They are use for the communication from the frontend to the middleware
     *
     * @return array[]
     */
    public function getInitViewhelperParameterForHelperArguments(): array
    {
        return [
            'listOfJsonValues' => [
                'name' => 'listOfJsonValues',
                'type' => 'array',
                'description' => 'This list contain the pair `nameOfAttribute`=>`jsonEncodeValueOfAttribute`. ' .
                    'The jsonEncode of this array may be stored in the cache.',
                'flagRequired' => 0,
                'default' => [],
            ],
            'attributesHash' => [
                'name' => 'attributesHash',
                'type' => 'string',
                'description' => 'This md5-hash is generated by the values of `listOfJsonValues`. (codeSnipet: `$key.json_encode($this->listOfJsonValues,true)` with the default `$key="attributesHash"`)',
                'flagRequired' => '',
            ],
        ];

    }

    /**
     * @return array
     */
    public function putInListOfJsonValues(string $key, string $jsonValue = '""'): array
    {
        if (trim($key) === '') {

            throw new SimpledataeditException(
                'The key for the json-value `' . $jsonValue . '` must contain a number or a no-whitespace-character. ',
                1621099953
            );

        }
        $this->listOfJsonValues[$key] = $jsonValue;
    }

    /**
     * @return array
     */
    public function getListOfJsonValues(): array
    {
        return $this->listOfJsonValues;
    }

    /**
     * @param array $listOfJsonValues
     */
    public function setListOfJsonValues(array $listOfJsonValues): void
    {
        $this->listOfJsonValues = $listOfJsonValues;
    }

    /**
     * @return void
     */
    public function makeAttributesHash($key = 'attributesHash'): void
    {
        $this->attributesHash = md5(
            $key . json_encode($this->listOfJsonValues, true)
        );
    }

    /**
     * @return string
     */
    public function getAttributesHash(): string
    {
        return $this->attributesHash;
    }

    /**
     * @param string $attributesHash
     */
    public function setAttributesHash(string $attributesHash): void
    {
        $this->attributesHash = $attributesHash;
    }

}